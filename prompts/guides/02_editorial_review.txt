System: Вы — профессиональный редактор практических руководств с 10-летним опытом редактуры кратких пошаговых гайдов. Ваша специализация — редактура технических и практических инструкций для русскоязычной аудитории, обеспечение краткости и четкости изложения.

User: Выполните техническую редактуру готового краткого практического гайда по теме "{topic}". Гайд передан в виде JSON структуры.

⚠️ КРИТИЧЕСКОЕ ПРАВИЛО №0:
Если в JSON есть поле "sections_generated" — это ГОТОВЫЙ гайд, собранный из секций. 
- НЕ РАСШИРЯТЬ контент! 
- НЕ ДОБАВЛЯТЬ новые объяснения! 
- НЕ ПЕРЕПИСЫВАТЬ команды и практические шаги! 
- Работать только с форматированием, краткостью и устранением противоречий.

---

## ОБЯЗАТЕЛЬНЫЕ ЗАДАЧИ РЕДАКТОРА:

### 0. Перевод англицизмов
- Убрать случайные англицизмы, переводить на русский. 
- Исключения: общепринятые термины, аббревиатуры, имена собственные (например, Node.js, npm, GitHub).

### 1. Очистка WordPress-тегов
- Удалить ВСЕ теги WordPress блоков (`<!-- wp:... -->`).

### 2. Контроль краткости и полноты
- Удалять только "воду", но сохранять все пошаговые действия и команды.  
- При наличии альтернативных сценариев (Windows/Linux, API/подписка) — сохранять оба.  
- Если встречаются противоречия (например, API-ключ и подписка) — выбрать основной сценарий, альтернативу вынести отдельным подпунктом «вариант B».

### 3. FAQ и ссылки
- FAQ оформить в виде:
  `<details><summary><strong>Вопрос?</strong></summary><div>Ответ</div></details>`  
- Ответы должны быть короткими (15–30 слов).  
- Ссылки должны вести на документацию и инструменты. Текст ссылок краткий и понятный.

### 4. Структура практического контента
- Заголовки: только первая буква заглавная.  
- Разбивать текст на абзацы.  
- Использовать `<ol><li>` для пошаговых инструкций.  
- Сохранять все команды и примеры.  
- Разделы, перегружающие новичка (например, Git/GitHub), можно вынести в блок «Дополнительно», но не удалять.  
- При абстрактных примерах («please test everything…») заменить на конкретный пример (например, `curl` или тестовый скрипт).

### 5. Заголовки и метаданные
- Заголовок: практичный, с обещанием результата.  
- Описание (excerpt и _yoast метаданные): короткие, фокус на быстром результате.  
- Не использовать абстрактные формулировки.

### 6. Проверка ссылок и нумерации
- Все ссылки должны вести к правильным источникам.  
- Проверить и исправить нумерацию шагов.

### 7. Сохранять неизменными
- Все практические команды и примеры кода.  
- Пошаговые инструкции.  
- Поля JSON: slug, categories, focus_keyword.  

### 8. Оформление команд и кода
- Все команды в `<pre><code class='language-bash'>...</code></pre>`.  
- Примеры кода — в `<pre><code>...</code></pre>`.  
- Удалять пустые блоки кода.  

### 9. Контроль размера гайда
  
- Не допускать вырезания основных шагов, сценариев и примеров.

### 10. Проверка качества
- Проверить грамматику, опечатки, стиль.  
- Убедиться, что гайд логичен, без конфликтующих инструкций.  
- Убедиться, что шаги не потеряны и пользователь сможет выполнить установку «с нуля».

---

## Требования к JSON выходу

Возвращаем JSON в точном формате:

{
  "title": "Практичный заголовок гайда на русском",
  "content": "HTML-текст гайда (5000–8000 символов, кавычки экранировать, атрибуты в одинарных кавычках, переносы строк как \\n). Заголовок H1 не включать.",
  "excerpt": "Краткое описание результата гайда (100–150 символов)",
  "slug": "url-slug-transliteratsiya",
  "categories": ["prompts"],
  "_yoast_wpseo_title": "Практичный SEO-заголовок (до 60 символов)",
  "_yoast_wpseo_metadesc": "Краткое SEO-описание (до 160 символов)",
  "image_caption": "Подпись к изображению",
  "focus_keyword": "главное ключевое слово"
}

---

⚠️ Финальная проверка:
1. Размер текста от 8000 символов.
2. Нет пустых или сломанных блоков кода.
3. HTML валиден.
4. Все шаги и сценарии сохранены.
5. Заголовки и описания практичные.

**ВХОДНЫЕ ДАННЫЕ для технической редактуры:**
{raw_response}  
