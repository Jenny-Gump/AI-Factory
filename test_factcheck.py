#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ñ–∞–∫—Ç—á–µ–∫–∏–Ω–≥–∞ —Å—Ç–∞—Ç—å–∏ –æ Claude Code CLI —á–µ—Ä–µ–∑ Gemini 2.5
"""

import os
import openai
from dotenv import load_dotenv

load_dotenv()

def load_article():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—å–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    article_path = "/Users/skynet/Desktop/AI DEV/Content-factory/output/claude_code_cli_step_by_step_guide_for_beginners/10_link_processing/article_with_links.html"
    with open(article_path, 'r', encoding='utf-8') as f:
        return f.read()

def fact_check_with_gemini(article_text):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—å–∏ –Ω–∞ —Ñ–∞–∫—Ç—á–µ–∫–∏–Ω–≥ —á–µ—Ä–µ–∑ Gemini 2.5"""

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ OpenRouter
    client = openai.OpenAI(
        base_url="https://openrouter.ai/api/v1",
        api_key=os.getenv("OPENROUTER_API_KEY"),
    )

    prompt = """
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç—É —Å—Ç–∞—Ç—å—é –æ Claude Code CLI –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏.

    –ü–†–û–í–ï–†–¨ –ò –ò–°–ü–†–ê–í–¨:
    1. –ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (npm –ø–∞–∫–µ—Ç—ã)
    2. –ù–∞–∑–≤–∞–Ω–∏—è API endpoints
    3. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    4. –ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –∏ –∫–æ–º–∞–Ω–¥
    5. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏

    –£–ö–ê–ñ–ò –ß–¢–û –ò–ú–ï–ù–ù–û –ò–°–ü–†–ê–í–ò–õ –≤ –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
    –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
    - [—á—Ç–æ –±—ã–ª–æ] ‚Üí [—á—Ç–æ —Å—Ç–∞–ª–æ]

    –ó–∞—Ç–µ–º –≤—ã–≤–µ–¥–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç–∞—Ç—å–∏ –≤ —Ç–æ–º –∂–µ HTML —Ñ–æ—Ä–º–∞—Ç–µ.

    –°–¢–ê–¢–¨–Ø –î–õ–Ø –ü–†–û–í–ï–†–ö–ò:
    """

    try:
        response = client.chat.completions.create(
            model="google/gemini-2.5-flash-lite-preview-06-17",
            messages=[
                {"role": "user", "content": prompt + article_text}
            ],
            max_tokens=8000,
            temperature=0.1
        )

        return response.choices[0].message.content

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Gemini: {e}")
        return None

def main():
    print("üîç –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç—å—é –¥–ª—è —Ñ–∞–∫—Ç—á–µ–∫–∏–Ω–≥–∞...")
    article = load_article()
    print(f"‚úÖ –°—Ç–∞—Ç—å—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {len(article)} —Å–∏–º–≤–æ–ª–æ–≤")

    print("\nü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Ñ–∞–∫—Ç–æ–≤ –≤ Gemini 2.5...")
    result = fact_check_with_gemini(article)

    if result:
        print("\nüìù –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∞–∫—Ç—á–µ–∫–∏–Ω–≥–∞:")
        print("=" * 50)
        print(result)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        with open("/Users/skynet/Desktop/AI DEV/Content-factory/factcheck_result.txt", 'w', encoding='utf-8') as f:
            f.write(result)
        print("\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ factcheck_result.txt")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∞–∫—Ç—á–µ–∫–∏–Ω–≥–µ")

if __name__ == "__main__":
    main()